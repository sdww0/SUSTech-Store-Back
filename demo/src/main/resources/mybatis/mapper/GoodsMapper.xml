<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.susstore.mapper.GoodsMapper" >
    
    <resultMap id="goods1" type="com.susstore.pojo.Goods">
        <id property="goodsId" column="goods_id1"/>
        <result property="price" column="price"/>
        <result property="title" column="title"/>
        <result property="introduce" column="introduce"/>
        <result property="isSell" column="is_sell"/>
        <result property="postage" column="postage"/>
        <result property="want" column="want"/>
        <result property="announceTime" column="announce_time"/>
        <result property="goodsState" column="goods_state"/>
        <association property="announcer" javaType="com.susstore.pojo.Users">
            <id property="userId" column="user_id"/>
            <result property="sign" column="sign"/>
            <result property="userName" column="user_name"/>
            <result property="gender" column="gender"/>
            <result property="credit" column="credit"/>
            <result property="picturePath" column="picture_path1"/>
        </association>
        <collection ofType="com.susstore.pojo.GoodsPicture" property="picturePath">
            <result column="path" property="path"/>
            <result column="is_default_picture" property="isDefaultPicture"/>
        </collection>
        <collection ofType="string" property="labels">
            <result column="labels"/>
        </collection>
    </resultMap>
    

    <insert id="addGoods" parameterType="Goods" useGeneratedKeys="true" keyProperty="goodsId" keyColumn="goods_id">
        insert into store."goods"
            (title,price,introduce,announcer_id,want,
             announce_time,goods_state,is_sell,postage,view)
        values (#{title},#{price},#{introduce},#{announcer.userId},
                0,#{announceTime},#{goodsState},#{isSell},#{postage},0)
                returning goods_id;
    </insert>
    
    <insert id="addGoodsPicture" >
        insert into store.goods_picture(goods_id,picture_path,is_activate,is_default_picture) values (#{goodsId},
        <foreach collection="pictures" item="picture" separator=",">
            #{picture.path},true,#{picture.isDefaultPicture})
        </foreach>
    </insert>

    <insert id="addLabels">
        insert into store.label(content) values 
        <foreach collection="contents" item="content" separator=",">
            (#{content})
        </foreach>
    </insert>

    <select id="getLabelsId" resultType="Integer">
        select *
        from store.label where content in(
            <foreach collection="contents" item="content" separator=",">
                #{content}
            </foreach>
            )
    </select>
    
    <insert id="addGoodsLabels">
        insert into store.goods_label (goods_id, label_id) VALUES
        <foreach collection="labels" item="label" separator=",">
            (#{goodsId},#{label})
        </foreach>
    </insert>

    <delete id="deleteGoodsLabels">
        delete
        from store.goods_label
        where goods_id = #{goodsId};
    </delete>

    <update id="deactivateGoodsPicture">
        update store.goods_picture set is_activate = false where goods_id = #{goodsId} and is_activate = true;
    </update>

    <update id="updateGoods" parameterType="Goods">
        update store."goods"
        <set>
            <if test="price != null"> price=#{price},</if>
            <if test="introduce != null">introduce=#{introduce},</if>
            <if test="announcer != null">announcer_id=#{announcer.userId},</if>
            <if test="want != null">want=#{want},</if>
            <if test="announceTime != null">announce_time=#{announceTime},</if>
            <if test="goodsState != null">goods_state=#{goodsState},</if>
            <if test="title != null">title=#{title},</if>
            <if test="isSell != null">is_sell=#{isSell}</if>
        </set>
        where goods_id=#{goodsId}
    </update>

    <update id="deleteGoods" parameterType="int">
        update store.goods set goods_state = 0 where goods_id = #{goodsId};
    </update>

    <select id="queryGoodsById" parameterType="int" resultMap="goods1">
        select goods.goods_id goods_id1 ,price,title,introduce,is_sell,postage,want,announce_time,goods_state,
               user_id,sign,gender,credit,money,users.picture_path picture_path1,
               goods_picture.picture_path path, is_default_picture,content labels
        from store.goods
            join store.users
                on goods_id = #{goodsId} and announcer_id = users.user_id
            join store.goods_label on goods.goods_id = goods_label.goods_id
            join store.label on goods_label.label_id = label.label_id
            join store.goods_picture on goods.goods_id = goods_picture.goods_id;
    </select>

    <select id="getGoodsPicturePath" resultType="com.susstore.pojo.GoodsPicture">
        select picture_path path,is_default_picture from store.goods_picture where goods_id = #{goodsId} and is_activate = true;
    </select>

    <select id="getDefaultPicturePath" resultType="String">
        select picture_path from store.goods_picture where goods_id = #{goodsId} and is_default_picture and is_activate;
    </select>

    <select id="getAnnounceUser" resultType="com.susstore.pojo.Users">
        select * from store.goods join store.users on  goods_id = #{goodsId} and goods.announcer_id = users.user_id;
    </select>

    <select id="queryGoodsByUserId" parameterType="int" resultType="GoodsAbbreviation">
        select * from store."goods"
        where store."goods".announcer_id= #{userId};
    </select>

    <select id="getBelongUserId" parameterType="int" resultType="int">
        select store."users".user_id from
                    store."goods" join store."users"
                    on store."goods".announcer_id=store."users".user_id
        where store."goods".goods_id= #{goodsId};
    </select>
    
    <select id="searchGoods" parameterType="map" resultType="GoodsAbbreviation">
        select * from store.goods where title like concat('%',#{searchContent,jdbcType=VARCHAR},'%')
        order by goods_id limit #{pageSize} offset (${pageSize}*(${pageIndex}-1));
    </select>

    <select id="ifOnShelfById" resultType="int">
        select goods_state from store.goods where goods_id=#{goodsId};
    </select>

    <select id="getGoodsComments" resultType="GoodsComment">
        select comment_id,content,user_name,user_id,picture_path,comment_date
               from store.goods_comment join store.users on belong_goods_id = #{goodsId} and comment_user_id=users.user_id;
    </select>

    <update id="increaseWant" >
        update store.goods set want = want+1 where goods_id = #{goodsId}
    </update>

    <update id="increaseView" >
        update store.goods set view = view+1 where goods_id = #{goodsId}
    </update>

    <insert id="commentGoods">
        insert into store.goods_comment(content, comment_user_id, comment_date, belong_goods_id)
        VALUES (#{content},#{userId},#{date},#{goodsId});

    </insert>


    <delete id="deleteGoodsComment">
        delete
        from store.goods_comment
        where comment_id = #{commentId};
    </delete>

    <select id="whetherCanDeleteComment" resultType="Integer">
        select comment_id from store.goods_comment
            join store.goods g
                on g.goods_id = goods_comment.belong_goods_id and goods_comment.comment_id = #{commentId}
            where announcer_id = #{userId} or comment_user_id = #{userId};
    </select>

</mapper>