<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.susstore.mapper.UsersMapper">

    <resultMap id="goods2" type="com.susstore.pojo.GoodsAbbreviation">
        <id property="goodsId" column="goods_id1"/>
        <result property="price" column="price"/>
        <result property="title" column="title"/>
        <result property="isSell" column="is_sell"/>
        <result property="postage" column="postage"/>
        <result property="want" column="want"/>
        <result property="view" column="view"/>
        <result property="announceTime" column="announce_time"/>
        <result property="goodsState" column="goods_state"/>
        <result property="picturePath" column="picture_path"/>
        <association property="announcer" javaType="com.susstore.pojo.Users">
            <id property="userId" column="user_id"/>
            <result property="sign" column="sign"/>
            <result property="userName" column="user_name"/>
            <result property="gender" column="gender"/>
            <result property="credit" column="credit"/>
            <result property="picturePath" column="picture_path1"/>
        </association>
        <collection ofType="string" property="labels">
            <result column="labels"/>
        </collection>
    </resultMap>


    <select id="queryUserList" resultType="Users">
        select * from store."users";
    </select>

    <select id="queryUserById" resultType="Users" parameterType="int">
        select * from store."users" where user_id=#{id};
    </select>

    <insert id="addUser" parameterType="Users" useGeneratedKeys="true" keyProperty="userId">
        insert into store."users" (user_name,password,gender,credit,money,email,picture_path,is_activate,activate_code,is_ban)
        values (#{userName},#{password},#{gender},10,0,#{email},#{picturePath},false,#{activateCode},false) returning user_id;
    </insert>

    <update id="updateUser" parameterType="Users" >
        update store.users
        <set>
            <if test="userName != null">user_name=#{userName},</if>
            <if test="password != null">password=#{password},</if>
            <if test="gender != null">gender=#{gender},</if>
            <if test="birthday != null"> birthday=#{birthday},</if>
            <if test="credit != null">credit=#{credit},</if>
            <if test="phone != null">phone=#{phone},</if>
            <if test="email != null">email=#{email},</if>
            <if test="idCard != null">id_card=#{idCard},</if>
            <if test="money != null">money=#{money},</if>
            <if test="picturePath != null">picture_path=#{picturePath}</if>
        </set>
        where user_id=#{userId};
    </update>


    <update id="updateUserEmail">
        update store."users"
        <set>
            <if test="newEmail != null">email=#{newEmail},</if>
        </set>
        where email=#{oldEmail};
    </update>

    <update id="updateUserByEmail" parameterType="Users" >
        update store."users"
        <set>
            <if test="userName != null">user_name=#{userName},</if>
            <if test="password != null">password=#{password},</if>
            <if test="gender != null">gender=#{gender},</if>
            <if test="birthday != null"> birthday=#{birthday},</if>
            <if test="credit != null">credit=#{credit},</if>
            <if test="phone != null">phone=#{phone},</if>
            <if test="email != null">email=#{email},</if>
            <if test="idCard != null">id_card=#{idCard},</if>
            <if test="money != null">money=#{money},</if>
            <if test="picturePath != null">picture_path=#{picturePath},</if>
            <if test="sign != null">sign = #{sign}</if>
        </set>
        where email=#{email};
    </update>

    <update id="updateUserById" parameterType="Users" >
        update store."users"
        <set>
            <if test="userName != null">user_name=#{userName},</if>
            <if test="password != null">password=#{password},</if>
            <if test="gender != null">gender=#{gender},</if>
            <if test="birthday != null"> birthday=#{birthday},</if>
            <if test="credit != null">credit=#{credit},</if>
            <if test="phone != null">phone=#{phone},</if>
            <if test="email != null">email=#{email},</if>
            <if test="idCard != null">id_card=#{idCard},</if>
            <if test="money != null">money=#{money},</if>
            <if test="picturePath != null">picture_path=#{picturePath},</if>
            <if test="email != null">email=#{email},</if>
            <if test="sign != null">sign = #{sign}</if>
        </set>
        where user_id=#{userId};
    </update>


    <delete id="deleteUser" parameterType="int">
        delete from store."users" where user_id=#{userId};
    </delete>

    <select id="queryUserIdByEmail" parameterType="String" resultType="int">
        select user_id from store."users" where email=#{email};
    </select>

    <select id="getUserByEmail" parameterType="String" resultType="com.susstore.pojo.Users">
        select user_id,password,is_activate,is_ban from store."users" where email=#{email};
    </select>

    <select id="getUserRole" parameterType="String" resultType="Integer">
        select role from store.users join store.user_role ur on users.user_id = ur.user_id and users.email = #{email};
    </select>

    <select id="getUserCheckCodeById" parameterType="int" resultType="int">
        select check_code from store."users" where user_id=#{id};
    </select>

    <select id="getUserCheckCodeByEmail" parameterType="String" resultType="int">
        select check_code from store."users" where email=#{email};
    </select>

    <update id="clearUserCheckCodeByEmail">
        update store."users"
        <set>
            check_code = -1;
        </set>
        where email=#{email};
    </update>

    <select id="ifExistById" resultType="Users">
        select * from store.users
            where user_id=#{id}
    </select>

    <select id="ifActivatedById" resultType="boolean">
        select is_activate from store.users
            where user_id=#{id}
    </select>

    <update id="changeUserCheckCodeById">
        update store.users set check_code= #{checkCode} where user_id = #{userId};
    </update>

    <update id="deactivateUsers">
        update store.users set is_activate = false , activate_code = #{activateCode}
        where user_id = #{userId};
    </update>


    <update id="clearUserCheckCodeById">
        update store."users"
        <set>
            check_code = -1;
        </set>
        where user_id=#{id};
    </update>

    <select id="getActivateUser" parameterType="String" resultType="int">
        select case (is_activate) when true then -2 else users.user_id end
        from store.users
        where activate_code=#{activateCode};
    </select>

    <update id="activateUser" parameterType="int" >
        update store."users"
        <set>
            is_activate=true
        </set>
        where user_id=#{userId};
    </update>

    <select id="getUserMoney" resultType="Float">
        select money
        from store.users where user_id=#{userId};
    </select>

    <update id="changeUserMoney">
        update store.users set money = (money+${delta}) where user_id=#{userId};
    </update>

    <select id="checkUserHasInputAddress" resultType="Boolean">
        select case(count(*)) when 0 then false else true end from (select *
        from store.address where address_id = #{addressId} and belong_user_id= #{userId}) cnt;
    </select>

    <select id="searchUsers" parameterType="map"  resultType="Users">
        select * from store.users where users.user_name like concat('%',#{userName,jdbcType=VARCHAR},'%')
        order by user_name limit #{pageSize} offset (${pageSize}*(${pageIndex}-1));
    </select>

    <update id="changeUserCredit">
        update store.users
            set credit = credit+(${change}) where user_id = #{userId};
    </update>

    <select id="getUsersComment" resultType="com.susstore.pojo.UsersComment">
        select content,comment_date,comment_user_id userId, picture_path,belong_deal_id dealId,
               user_name
               from store.users_comment join store.users on users_comment.comment_user_id = users.user_id
        and belong_user_id = #{userId};
    </select>

    <insert id="addUserComplain">
        insert into store.complain_users (users_id, complainer_id, content, picture_path,is_process)
        values (#{userId},#{complainerId},#{content},#{picturePath},false);
    </insert>

    <insert id="registerRole">
        insert into store.user_role(user_id, role)  values (#{userId},#{role});
    </insert>

    <insert id="addCollection">
        insert into store.users_collection(user_id, goods_id) VALUES (#{userId},#{goodsId});
    </insert>

    <delete id="deleteCollection">
        delete
        from store.users_collection
        where user_id = #{userId} and goods_id = #{goodsId};
    </delete>

    <select id="getUsersCollection" resultMap="goods2">
        select goods.goods_id goods_id1 ,view,price,title,is_sell,postage,want,announce_time,goods_state,
               users_collection.user_id user_id,sign,gender,credit,money,users.picture_path picture_path1,
               goods_picture.picture_path picture_path, is_default_picture,content labels
        from store.goods join store.users_collection on user_id = #{userId} and goods.goods_id = users_collection.goods_id
                        join store.users on users_collection.user_id = users.user_id
                         left join store.goods_label on goods.goods_id = goods_label.goods_id
                         left join store.label on goods_label.label_id = label.label_id
                         left join store.goods_picture on goods.goods_id = goods_picture.goods_id and is_default_picture and goods_picture.is_activate;

    </select>

    <select id="isInUserCollection" resultType="Boolean">
        select true from store.users
            join store.users_collection
                on users.user_id = users_collection.user_id
                       and email = #{email} and goods_id = #{goodsId};
    </select>

    <select id="getUserVisitedLabels" resultType="UsersLabel">
        select * from store.users_label where user_id = #{userId} order by visit_time;
    </select>

</mapper>