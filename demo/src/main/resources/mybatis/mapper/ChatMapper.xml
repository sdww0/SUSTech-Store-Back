<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.susstore.mapper.ChatMapper" >

    <resultMap type="com.susstore.pojo.chat.Chat" id="initContentMap">
        <id property="goodsId" column="goods_id" />
        <result property="goodsPicturePath" column="goods_picture_path"/>
        <result property="goodsPrice" column="goods_price" />

        <result property="speakUserId" column="speak_user_id" />
        <result property="speakUserName" column="speak_user_name" />
        <result property="speakUserPicturePath" column="speak_user_picture_path" />

        <result property="otherUserId" column="other_user_id" />
        <result property="otherUserName" column="other_user_name" />
        <result property="otherUserPicturePath" column="other_user_picture_path" />

        <!-- 一对多级联查询，ofType表示集合中的元素类型 -->
        <collection property="chatContents"
                    ofType="com.susstore.pojo.chat.ChatContent">
            <id property="chatContentId" column="chat_content_id"/>
            <result property="isSpeakUser" column="is_speak_user" />
            <result property="content" column="content" />
            <result property="date" column="date"/>
        </collection>
    </resultMap>

    <insert id="insertNewChatContent" useGeneratedKeys="true" >
        insert into store.chat_content(chat_id, is_initiator_speak, speak_date, content) VALUES
        (#{chatId},#{isInitiatorSpeak},#{speakDate},#{content}) returning chat_content_id
    </insert>

    <select id="getInitContent" resultMap="initContentMap">
        select chat.goods_id goods_id,goods.price goods_price,goods_picture.picture_path goods_picture_path,
        other.user_id other_user_id, other.user_name other_user_name, other.picture_path other_user_picture_path,
        speaker.user_id speak_user_id, speaker.user_name speak_user_name, speaker.picture_path speak_user_picture_path,
        chat_content_id,
        case(chat.initiator_id = #{userId}) when true then (is_initiator_speak) else (not is_initiator_speak) end as is_speak_user,
        content,speak_date as date
        from store.chat
            join store.goods
                on chat.goods_id = goods.goods_id
                       and chat.chat_id = #{chatId}
                       and (goods.announcer_id = #{userId} or initiator_id = #{userId})
            left join store.goods_picture
                on goods.goods_id = goods_picture.goods_id
                       and is_activate
                       and is_default_picture
            left join store.chat_content on chat.chat_id = chat_content.chat_id
        join
        <if test="isInitiator">
            (select *
            from store.chat
            join store.users
            on chat.chat_id = #{chatId}
                join store.goods
            on goods.announcer_id = users.user_id and goods.goods_id = chat.goods_id) </if>
        <if test="!isInitiator">
            (select *
            from store.chat
            join store.users
            on chat.chat_id = #{chatId} and chat.initiator_id = users.user_id) </if>
        other on other.chat_id = chat.chat_id
        join
        <if test="!isInitiator">
            (select *
            from store.chat
            join store.users
            on chat.chat_id = #{chatId}
            join store.goods
            on goods.announcer_id = users.user_id and goods.goods_id = chat.goods_id) </if>
        <if test="isInitiator">
            (select *
            from store.chat
            join store.users
            on chat.chat_id = #{chatId} and chat.initiator_id = users.user_id) </if>
        speaker on speaker.chat_id = chat.chat_id;

<!--        select deal.goods_id goods_id, goods.price goods_price, goods_picture.picture_path goods_picture_path,-->
<!--               other.user_id other_user_id, other.user_name other_user_name, other.picture_path other_user_picture_path,-->
<!--        speaker.user_id speak_user_id, speaker.user_name speak_user_name, speaker.picture_path speak_user_picture_path,-->
<!--               chat_content_id,-->
<!--               case(deal.seller_id = #{userId}) when true then (is_seller_speak) else (not is_seller_speak) end as is_speak_user,-->
<!--               content,speak_date as date-->
<!--        from (select * from store.deal on deal_id = #{dealId}) deal-->
<!--            left join store.chat_content-->
<!--                on chat_content.belong_to_deal_id = deal.deal_id-->
<!--            join store.goods on deal.goods_id = goods.goods_id-->
<!--            join store.goods_picture on goods.goods_id = goods_picture.goods_id and is_activate and is_default_picture-->
<!--            join-->
<!--            <if test="isSeller">-->
<!--            (select *-->
<!--            from store.deal-->
<!--                join store.users-->
<!--                    on deal.deal_id = #{dealId} and deal.buyer_id = users.user_id) </if>-->
<!--            <if test="!isSeller">-->
<!--            (select *-->
<!--            from store.deal-->
<!--            join store.users-->
<!--            on deal.deal_id = #{dealId} and deal.seller_id = users.user_id) </if>-->
<!--            other on other.deal_id = deal.deal_id-->
<!--            join-->
<!--            <if test="isSeller">-->
<!--                (select *-->
<!--                from store.deal-->
<!--                join store.users-->
<!--                on deal.deal_id = #{dealId} and deal.seller_id = users.user_id) </if>-->
<!--            <if test="!isSeller">-->
<!--                (select *-->
<!--                from store.deal-->
<!--                join store.users-->
<!--                on deal.deal_id = #{dealId} and deal.buyer_id = users.user_id) </if>-->
<!--            speaker on speaker.deal_id = deal.deal_id;-->
    </select>


    <select id="getUserChatHistory" resultType="com.susstore.pojo.chat.ChatHistory">
        with announce_list as (select * from store.chat join store.goods on chat.goods_id = goods.goods_id where announcer_id = #{userId})
           , initiate_list as (select * from store.chat join store.goods on chat.goods_id = goods.goods_id where initiator_id = #{userId})

        select other.chat_id,user_id other_user_id,user_name other_user_name,
               picture_path other_user_picture_path, content last_message_content,
               speak_date last_message_date
        from ((select chat_id, users.user_id, users.user_name, users.picture_path
               from announce_list
                        join store.users
                             on users.user_id in(announce_list.initiator_id))
              union
              (select chat_id, users.user_id, users.user_name, users.picture_path
               from initiate_list
                        join store.users
                             on users.user_id in(initiate_list.announcer_id))) other
                 left join
             (select chat_id,content,speak_date from
                 ((select min(chat_content_id) id,max(speak_date)
                   from announce_list
                            join store.chat_content
                                 on chat_content.chat_id in (announce_list.chat_id)
                                     and is_initiator_speak = true group by announce_list.chat_id)
                  union
                  (select min(chat_content_id) id,max(speak_date)
                   from initiate_list
                            join store.chat_content
                                 on chat_content.chat_id in (initiate_list.chat_id)
                                     and is_initiator_speak = false group by  initiate_list.chat_id)
                 ) chat1 left join store.chat_content on chat1.id=chat_content.chat_content_id
             ) chat on chat.chat_id = other.chat_id;
    </select>

    <select id="getAnnouncerId" resultType="Integer">
        select announcer_id
        from store.chat join store.goods g on g.goods_id = chat.goods_id and chat.chat_id = #{chatId};
    </select>

    <select id="getInitiatorId" resultType="Integer">
        select initiator_id
        from store.chat where chat.chat_id = #{chatId};
    </select>

    <select id="getChatId" resultType="Integer">
        select chat_id from store.chat where goods_id = #{goodsId} and initiator_id = #{userId};
    </select>

    <insert id="addChat" keyColumn="chat_id" useGeneratedKeys="true">
        insert into store.chat (goods_id,initiator_id) values (#{goodsId},#{initiatorId})
    </insert>

</mapper>